# $t1 = 0
andi $t1, $t1, 0

# $v0 = 0x0040
addi $v0, $t1, 0x4
sll $v0, $v0, 4

# $v1 = 0x1010
addi $v1, $t1, 0x1
sll $v1, $v1, 8
addi $v1, $v1, 0x1
sll $v1, $v1, 4

# $v2 = 0x000F
addi $v2, $t1, 0xF

# $v3 = 0x00F0
addi $v3, $t1, 0xF
sll $v3, $v3, 4

# $t0 = 0x0000
andi $t0, $t0, 0

# $a0 = 0x0010
addi $a0, $t1, 0x1
sll $a0, $a0, 4

# $a1 = 0x0005
addi $a1, $t1, 0x5

WHILE:
  # while ($a1 > 0)
  andi $t0, $t0, 0
  slt $t1, $t0, $a1             ## THIS HAS CHANGED (flipped a1 and t0)
  beq $t0, $t1, CONTINUE_LOOP   ## THIS HAS CHANGED (ENDLOOP -> CONTINUE_LOOP)
  j ENDLOOP
  CONTINUE_LOOP:                ## THIS HAS CHANGED (ENDLOOP -> CONTINUE_LOOP, and moved down two lines)
  # $a1 = $a1 - 1
  addi $a1, $a1, -1

  #$t0 = Mem[$a0]
  lw $t0, 0($a0)

  # $t1 = 0x0100
  andi $t1, $t1, 0
  addi $t1, $t1, 1
  sll $t1, $t1, 8

  # if ($t0 > 0x0100)
  slt $t1, $t0, $t1
  andi $t0, $t0, 0
  beq $t1, $t0, IF              ## THIS HAS CHANGED (ELSE1 -> IF)
  j ELSE
  IF:
    # $v0 = $v0 / 8
    srl $v0, $v0, 3

    # $v1 = $v1 | $v0
    or $v1, $v1, $v0

    # $t1 = 0xFF00
    andi $t1, $t1, 0
    addi $t1, $t1, 0xF
    sll $t1, $t1, 4
    addi $t1, $t1, 0xF
    sll $t1, $t1, 8

    # Mem[$a0] = 0xFF00
    sw $t1, 0($a0)
    j END
  ELSE:
    # $v2 = $v2 x 2
    sll $v2, $v2, 2             ## THIS HAS CHANGED (v1 -> v2)

    # $v3 = $v3 (x) $v2
    xor $v3, $v3, $v2

    # $t1 = 0x00FF
    andi $t1, $t1, 0
    addi $t1, $t1, 0xF
    sll $t1, $t1, 4
    addi $t1, $t1, 0xF

    # Mem[$a0] = 0x00FF
    sw $t1, 0($a0)
    j END

  END:
  # $a0 = $a0 + 2
  addi $a0, $a0, 2
  j WHILE

ENDLOOP:
